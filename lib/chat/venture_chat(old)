import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class VentureChat extends StatefulWidget {
  final String chatName;
  final String lastMessage;
  final Timestamp? lastMessageTime;
  final String? lastMessageSentBy;
  final List<dynamic> members;
  final String chatId;

  const VentureChat({
    super.key,
    required this.chatId,
    required this.chatName,
    required this.lastMessage,
    required this.lastMessageTime,
    required this.lastMessageSentBy,
    required this.members,
  });

  @override
  _VentureChatState createState() => _VentureChatState();
}

class _VentureChatState extends State<VentureChat> {
  final TextEditingController _messageController = TextEditingController();

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          children: [
            Text(widget.chatName, style: const TextStyle(fontSize: 18)),
            StreamBuilder<DocumentSnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('venture_chats')
                  .doc(widget.chatId)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Container();
                }

                var chatData = snapshot.data!.data() as Map<String, dynamic>;
                List<dynamic> members = chatData['members'] ?? [];

                return Text(
                  '${members.length} members',
                  style: const TextStyle(fontSize: 14.0),
                );
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {},
            child: const Text("Leave"),
          ),
        ],
        centerTitle: true,
      ),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: MessageList(chatId: widget.chatId),
            ),
            SendMessageForm(
              chatId: widget.chatId,
              messageController: _messageController,
              chatName: widget.chatName,
              lastMessageSentBy: widget.lastMessageSentBy,
            ),
          ],
        ),
      ),
    );
  }
}

class MessageList extends StatelessWidget {
  final String chatId;

  const MessageList({super.key, required this.chatId});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('venture_chats')
          .doc(chatId)
          .collection('messages')
          .orderBy('timestamp', descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        List<QueryDocumentSnapshot> documents = snapshot.data!.docs;

        return ListView.builder(
          reverse: true,
          padding: const EdgeInsets.all(16.0),
          itemCount: documents.length,
          itemBuilder: (context, index) {
            var data = documents[index].data() as Map<String, dynamic>;

            return MessageBubble(
              key: ValueKey(documents[index].id),
              messageId: documents[index].id,
              senderId: data['senderId'] ?? '',
              sender: data['sender'] ?? '',
              content: data['content'] ?? '',
              timestamp: data['timestamp'] ?? Timestamp.now(),
              currentUserId: FirebaseAuth.instance.currentUser!.uid,
              seenBy: List<String>.from(data['seenBy'] ?? []),
            );
          },
        );
      },
    );
  }
}

class MessageBubble extends StatelessWidget {
  final String messageId;
  final String senderId;
  final String sender;
  final String content;
  final Timestamp timestamp;
  final String currentUserId;
  final List<String> seenBy;

  const MessageBubble({
    super.key,
    required this.messageId,
    required this.senderId,
    required this.sender,
    required this.content,
    required this.timestamp,
    required this.currentUserId,
    required this.seenBy,
  });

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<DocumentSnapshot>(
      future:
          FirebaseFirestore.instance.collection('users').doc(senderId).get(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Container();
        }

        if (!snapshot.hasData || snapshot.data == null) {
          return const Text('No user data found');
        }

        var userData = snapshot.data!.data() as Map<String, dynamic>;
        String pfp = userData['photo_url'];

        return _buildMessageBubble(context, pfp);
      },
    );
  }

  Widget _buildMessageBubble(BuildContext context, String pfp) {
    bool isMe = senderId == currentUserId;

    return Container(
      margin: const EdgeInsets.only(bottom: 8.0),
      alignment: isMe ? Alignment.centerRight : Alignment.centerLeft,
      child: Column(
        crossAxisAlignment:
            isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
        children: [
          if (!isMe) ...[
            Row(
              children: [
                CircleAvatar(
                  backgroundImage: NetworkImage(pfp),
                  radius: 16.0,
                ),
                const SizedBox(width: 8),
                Text(
                  sender,
                  style: const TextStyle(
                      fontWeight: FontWeight.bold, color: Colors.black),
                ),
              ],
            ),
            const SizedBox(height: 8),
          ],
          Container(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
            decoration: BoxDecoration(
              color: isMe ? Colors.blue[200] : Colors.grey[300],
              borderRadius: BorderRadius.only(
                topLeft: const Radius.circular(16.0),
                topRight: const Radius.circular(16.0),
                bottomLeft: !isMe ? const Radius.circular(16.0) : Radius.zero,
                bottomRight: isMe ? const Radius.circular(16.0) : Radius.zero,
              ),
            ),
            child: Column(
              crossAxisAlignment:
                  isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              children: [
                Text(
                  content,
                  style: const TextStyle(fontSize: 16.0, color: Colors.black),
                ),
                const SizedBox(height: 4.0),
                Text(
                  _getMessageTime(timestamp.toDate()),
                  style: TextStyle(fontSize: 12.0, color: Colors.grey[600]),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  String _getMessageTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);

    if (difference.inDays > 0) {
      return '${timestamp.month}/${timestamp.day}/${timestamp.year}';
    } else {
      final hours = timestamp.hour % 12 == 0 ? 12 : timestamp.hour % 12;
      final minutes = timestamp.minute.toString().padLeft(2, '0');
      final period = timestamp.hour >= 12 ? 'PM' : 'AM';
      return '$hours:$minutes $period';
    }
  }
}

class SendMessageForm extends StatelessWidget {
  final TextEditingController messageController;
  final String chatId;
  final String chatName;
  final String? lastMessageSentBy;

  const SendMessageForm({
    super.key,
    required this.messageController,
    required this.chatId,
    required this.chatName,
    required this.lastMessageSentBy,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[200],
        borderRadius: BorderRadius.circular(30.0),
      ),
      margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              keyboardType: TextInputType.text,
              controller: messageController,
              decoration: const InputDecoration(
                hintText: 'Type a message...',
                contentPadding: EdgeInsets.symmetric(horizontal: 16.0),
                border: InputBorder.none,
              ),
              onSubmitted: (message) {
                if (message.isNotEmpty) {
                  sendMessage(chatId, message);
                  messageController.clear();
                }
              },
            ),
          ),
          IconButton(
            icon: const Icon(Icons.send),
            onPressed: () {
              String message = messageController.text;
              if (message.isNotEmpty) {
                sendMessage(chatId, message);
                messageController.clear();
              }
            },
          ),
        ],
      ),
    );
  }

  Future<void> sendMessage(String chatId, String message) async {
    var firestore = FirebaseFirestore.instance;
    FirebaseAuth auth = FirebaseAuth.instance;
    User? currentUser = auth.currentUser;
    String currentUserId = currentUser!.uid;
    CollectionReference messageCollection = firestore
        .collection('venture_chats')
        .doc(chatId)
        .collection('messages');
    DocumentReference userRef =
        firestore.collection('users').doc(currentUserId);
    var userSnap = await userRef.get();
    var userData = userSnap.data() as Map<String, dynamic>;
    String sender = userData['username'];

    await messageCollection.add({
      'senderId': currentUserId,
      'sender': sender,
      'content': message,
      'timestamp': Timestamp.now(),
      'seenBy': [currentUserId],
    });

    // Update lastMessage and lastMessageTime in chat document
    await firestore.collection('venture_chats').doc(chatId).update({
      'last_message': message,
      'last_message_time': Timestamp.now(),
      'last_message_sent_by': userRef,
    });
  }
}
